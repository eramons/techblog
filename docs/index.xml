<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Small Technical Blog</title>
    <link>https://eramons.github.io/techblog/</link>
    <description>Recent content on Small Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017-2021 E. Ramon</copyright>
    <lastBuildDate>Tue, 27 Apr 2021 09:00:00 +0200</lastBuildDate><atom:link href="https://eramons.github.io/techblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://eramons.github.io/techblog/home/about/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://eramons.github.io/techblog/home/about/</guid>
      <description>IT is not only the way to earn my living, is also my favourite hobby. This blog is a collection of step-by-step guides summarizing some experimental projects during my free time - nothing professional. At the end it&amp;rsquo;s just a slightly better way to keep my notes organised than having bunches of text files randomly distributed through several devices :)</description>
    </item>
    
    <item>
      <title>Recent Posts</title>
      <link>https://eramons.github.io/techblog/home/posts/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://eramons.github.io/techblog/home/posts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://eramons.github.io/techblog/home/contact/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://eramons.github.io/techblog/home/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Coreboot on ThinkPad W500</title>
      <link>https://eramons.github.io/techblog/post/thinkpadw500/</link>
      <pubDate>Tue, 27 Apr 2021 09:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/thinkpadw500/</guid>
      <description>Goal:
Give an old Lenovo Thinkpad W500 a second life featuring Coreboot and Ubuntu
My partner replaced his laptop already two years and half ago, buying a beautiful brand-new Lenovo Thinkpad T480s. The old machine, a Lenovo Thinkpad W500 - heavier and bulkier and a lot less pretty - wasn&amp;rsquo;t getting any further Windows updates and it was painfully slow, rarely being used. Furthermore, the machine was overheating and the battery was almost dead.</description>
    </item>
    
    <item>
      <title>Nextcloud self-hosting on K8s</title>
      <link>https://eramons.github.io/techblog/post/nextcloud/</link>
      <pubDate>Thu, 07 Jan 2021 09:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/nextcloud/</guid>
      <description>Goal:
Self-host Nextcloud on Kubernetes and use it as server-side for the /e operating system
Nextcloud offers an on-premises content collaboration platform, which is open-source and free. The Nextcloud server is written in the PHP and JavaScript scripting languages.
The /e/ ROM is a fork of Android (more precisely from LineageOS).
See previous post to see how to install the OS on a LG G3 and my efforts to self-host the /e server beta version.</description>
    </item>
    
    <item>
      <title>/e self-hosting and /e OS on LG G3</title>
      <link>https://eramons.github.io/techblog/post/e/</link>
      <pubDate>Wed, 09 Dec 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/e/</guid>
      <description>Goal:
Rely on the /e platform for private cloud self-hosting and as android operating system
/e is a mobile ecosystem that:
 is open source is presented as an environment which values privacy is un-googled but still compatible with android apps  The /e/ ROM is a fork of Android (more precisely from LineageOS).
The /e/ cloud includes several applications and it’s built upon NextCloud, Postfix, Dovecot and OnlyOffice. It’s been integrated to offer a single login identity in /e/OS as well as online, where users can retrieve their data from the ecloud global services.</description>
    </item>
    
    <item>
      <title>K3s on Raspberry Pi 4</title>
      <link>https://eramons.github.io/techblog/post/k3s/</link>
      <pubDate>Mon, 15 Jun 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/k3s/</guid>
      <description>Goal:
Set up a minimal Kubernetes cluster on Rapberry Pi 4.
I ordered a new Raspberry Pi 4 a couple of days ago. I already use one at work for automated testing and I think it&amp;rsquo;s pretty cool, but I actually wasn&amp;rsquo;t sure what I wanted it for. After giving it a thought, I decided to install Rancher&amp;rsquo;s K3S distribution on it, turning it to a convenient, low-power-consumption, single-node K8s distribution I can use as a playground.</description>
    </item>
    
    <item>
      <title>Self-hosted cozy on K8s</title>
      <link>https://eramons.github.io/techblog/post/cozy/</link>
      <pubDate>Thu, 28 May 2020 17:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/cozy/</guid>
      <description>Goal:
Deploy cozy on my homemade kubernetes cluster
The K8s homemade cluster on baremetal was meant to be just an exercise and not a permanent setup. Still, I needed to find something to deploy on it :)
I decided to try out Cozy Cloud deploying software and dependencies as containers in my K8s cluster.
Cozy is a personal, free and self-hostable cloud platform, written in Go.
Milestones  Pre-requisites: make sure the infrastructure is ready Cozy Software: installation, dependencies and configuration Docker Images: which one are available and which new ones we need K8s Configuration: write manifests for deployment in the cluster Cozy instance: create a new cozy instance and test it  1.</description>
    </item>
    
    <item>
      <title>DNS Configuration for K8s</title>
      <link>https://eramons.github.io/techblog/post/dns/</link>
      <pubDate>Tue, 19 May 2020 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/dns/</guid>
      <description>Goal:
Configure DNS, so applications running on the K8S cluster are reachable from the internet and TLS-protected
Setting up a home made kubernetes cluster is quite straightforward. However, for deploying applications or services accessible from the internet, the configuration capabilities of the standard provider&amp;rsquo;s internet boxes are usually too limited.
In particular I had the issue of the internal host resolution. My internet box wasn&amp;rsquo;t able to properly route requests to the own external IP address from inside the internal network.</description>
    </item>
    
    <item>
      <title>Home-made K8s Cluster</title>
      <link>https://eramons.github.io/techblog/post/kubernetes_cluster/</link>
      <pubDate>Sat, 21 Mar 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/kubernetes_cluster/</guid>
      <description>Goal:
Set up a home Kubernetes cluster with old hardware: 1 Master and 1 Worker
Tasks:
 Find old hardware Install Ubuntu Server 18.04 LTS Set up Master Node Set up Worker Node Service Account Install helm Install ingress Install cert-manager Cluster Issuer (Let&amp;rsquo;s Encrypt) Storage  1. Find old hardware Since kubernetes is lightweight and can run almost everywhere, I decided to go down to the cellar and rescue some old PC which I thought could still work for this.</description>
    </item>
    
    <item>
      <title>EHCI Debug</title>
      <link>https://eramons.github.io/techblog/post/debug_coreboot/</link>
      <pubDate>Wed, 13 Mar 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/debug_coreboot/</guid>
      <description>The EHCI Debug Port is an optional capability of EHCI controllers which can be used for early debugging for hardware which does not have a serial port. All USB2 host controllers are EHCI controllers.
Since I installed Coreboot on my Librem, I experienced some issues. In order to investigate - and since the Librem has no serial port - I aimed to do some Coreboot and kernel debugging with a Raspberry Pi Zero.</description>
    </item>
    
    <item>
      <title>Build Coreboot</title>
      <link>https://eramons.github.io/techblog/post/build_coreboot/</link>
      <pubDate>Mon, 25 Feb 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/build_coreboot/</guid>
      <description>DISCLAIMER: try anything described here at your own risk! These are just my notes. That it did work for me then does not mean this would work for you now.
After successfully installing coreboot on my librem 13 v1, I noticed that unfortunately the wifi wasn&amp;rsquo;t working anymore. Since the coreboot version I flashed previously wasn&amp;rsquo;t quite new, I decided to build a new rom image myself using the newest coreboot source code.</description>
    </item>
    
    <item>
      <title>Install Coreboot on the Librem 13 v.1</title>
      <link>https://eramons.github.io/techblog/post/coreboot_librem/</link>
      <pubDate>Mon, 18 Feb 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/coreboot_librem/</guid>
      <description>DISCLAIMER: try this at your own risk! The information below it&amp;rsquo;s just a summary of my notes and experiences during the installation of coreboot on my notebook.
I am the proud owner of a Librem 13 v1 (bought in September 2016). Currently all librem laptops are shipped with coreboot installed on them, but mine was still shipped with propietary firmware on it. Fortunately coreboot is supported anyway - it was possible for me to install coreboot myself.</description>
    </item>
    
    <item>
      <title>Debian on Asus Chromebook Flip C101PA</title>
      <link>https://eramons.github.io/techblog/post/asuschromebook_debian/</link>
      <pubDate>Tue, 04 Dec 2018 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/asuschromebook_debian/</guid>
      <description>The Asus Chromebook Flip C101PA (bob) is a convertible touchscreen laptop powered by an ARMv8 Rockchip RK3399 hexa-core processor and 4GB RAM, measuring 10.4&amp;quot; x 7.2&amp;quot; x 0.6&amp;quot; and weighing 1 kg.
Features:
 Rockchip RK3399 (OP1) dual-core 2.0GHz Cortex-A72 and quad-core 1.4GHz Cortex-A53 processor 4GB LPDDR3 RAM 10.1&amp;quot; 1280x800 LED display Mali T860MP4 GPU 16GB eMMC 38 Whrs battery 2x USB 3.1 Type-C ports 1x USB 2.0 Type-A port  ARM Chromebooks ship with the Coreboot bootloader and use Depthcharge as the payload.</description>
    </item>
    
    <item>
      <title>Debian on Radxa Rock Square</title>
      <link>https://eramons.github.io/techblog/post/rock2_debian/</link>
      <pubDate>Thu, 27 Jul 2017 15:03:58 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/rock2_debian/</guid>
      <description>Radxa Rock 2 Square is a Rockchip RK3288 based solution.
Available images
The available images run with:
 A modified version of u-boot The Rabian operating system (which is based on Debian 8) A custom radxa kernel.  The goal is to get a pure Debian distribution up and running on the board:
 Debian u-boot Debian armhf linux-image kernel Pure Debian root file system  For this small project, we have two Radxa Rock 2 Square boards:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eramons.github.io/techblog/home/footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eramons.github.io/techblog/home/footer/</guid>
      <description>Avatar image from https://www.iconfinder.com</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://eramons.github.io/techblog/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://eramons.github.io/techblog/contact/</guid>
      <description> E-Mail: blog [ett] empanadilla.net  </description>
    </item>
    
  </channel>
</rss>
