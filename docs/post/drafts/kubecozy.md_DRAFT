
```
eramon@caipirinha:~/dev/cozy$ helm repo add couchdb https://apache.github.io/couchdb-helm
"couchdb" has been added to your repositories
eramon@caipirinha:~/dev/cozy$ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "couchdb" chart repository
...Successfully got an update from the "nginx-stable" chart repository
...Successfully got an update from the "incubator" chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 
eramon@caipirinha:~/dev/cozy$ helm install --name mycouchdb1 couchdb/couchdb
Error: unknown flag: --name
eramon@caipirinha:~/dev/cozy$ helm install mycouchdb1 couchdb/couchdb
Error: execution error at (couchdb/templates/configmap.yaml:12:54): A value for couchdbConfig.couchdb.uuid must be set
```

https://docs.couchdb.org/en/master/install/kubernetes.html

Not working, probably because of the helm version. Following worked:

```
eramon@caipirinha:~/dev/cozy$ helm install mycouchdb1 couchdb/couchdb --set allowAdminParty=true   --set couchdbConfig.couchdb.uuid=$(curl https://www.uuidgenerator.net/api/version4 2>/dev/null | tr -d -)
NAME: mycouchdb1
LAST DEPLOYED: Mon Apr 13 16:07:48 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
Apache CouchDB is starting. Check the status of the Pods using:

  kubectl get pods --namespace default -l "app=couchdb,release=mycouchdb1"

Once all of the Pods are fully Ready, execute the following command to create
some required system databases:

  kubectl exec --namespace default mycouchdb1-couchdb-0 -c couchdb -- \
    curl -s \
    http://127.0.0.1:5984/_cluster_setup \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{"action": "finish_cluster"}'

Then it's time to relax.
```

Apparently, three new pods were started:
```
eramon@caipirinha:~/dev/cozy$ kubectl get pods
NAME                                      READY   STATUS    RESTARTS   AGE
mycouchdb1-couchdb-0                      1/1     Running   0          2m18s
mycouchdb1-couchdb-1                      1/1     Running   0          2m18s
mycouchdb1-couchdb-2                      1/1     Running   0          2m18s
mynginx1-nginx-ingress-847fb568db-2v96s   1/1     Running   0          65m
```

Why three instances? Why is the data persisted?
Should I apply -f and yaml files instead of helm, for nginx?
According to Phil, it does not matter, I can either use own yaml files or helm charts.

https://cert-manager.io/docs/installation/kubernetes/
Install certmanager using helm:
```
eramon@caipirinha:~/dev/kubernetes$ kubectl version
Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.4", GitCommit:"8d8aa39598534325ad77120c120a22b3a990b5ea", GitTreeState:"clean", BuildDate:"2020-03-12T21:03:42Z", GoVersion:"go1.13.8", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.4", GitCommit:"8d8aa39598534325ad77120c120a22b3a990b5ea", GitTreeState:"clean", BuildDate:"2020-03-12T20:55:23Z", GoVersion:"go1.13.8", Compiler:"gc", Platform:"linux/amd64"}
eramon@caipirinha:~/dev/kubernetes$ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.crds.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
eramon@caipirinha:~/dev/kubernetes$ kubectl create namespace cert-manager
namespace/cert-manager created
eramon@caipirinha:~/dev/kubernetes$ helm repo add jetstack https://charts.jetstack.io
"jetstack" has been added to your repositories
eramon@caipirinha:~/dev/kubernetes$ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "couchdb" chart repository
...Successfully got an update from the "nginx-stable" chart repository
...Successfully got an update from the "jetstack" chart repository
...Successfully got an update from the "incubator" chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 
eramon@caipirinha:~/dev/kubernetes$ helm install \
>   cert-manager jetstack/cert-manager \
>   --namespace cert-manager \
>   --version v0.14.1
NAME: cert-manager
LAST DEPLOYED: Tue Apr 14 09:29:47 2020
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

eramon@caipirinha:~/dev/kubernetes$ kubectl get pods --namespace cert-manager
NAME                                       READY   STATUS    RESTARTS   AGE
cert-manager-579d48dff8-2q8kg              1/1     Running   0          2m34s
cert-manager-cainjector-789955d9b7-p9zxh   1/1     Running   0          2m34s
cert-manager-webhook-64869c4997-vgw9w      1/1     Running   0          2m34s
```

dev/letsencrypt-staging.yaml
dev/ingress.yaml
kubectl apply -f to both

cozy-stack-service: listen in port 443 
cozy-stack-deployment: image??


Take a look at this in order to find out how to run cozy-stack under kubernetes:
https://github.com/cozy/cozy-stack/blob/master/docs/docker.md

https://hub.helm.sh/charts/couchdb/couchdb

