<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Small Technical Blog</title>
    <link>https://eramons.github.io/techblog/post/</link>
    <description>Recent content in Posts on Small Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 E. Ramon</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://eramons.github.io/techblog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K3S Cluster on Raspberry Pi 4</title>
      <link>https://eramons.github.io/techblog/post/k3s/</link>
      <pubDate>Sun, 29 Mar 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/k3s/</guid>
      <description>Goal:
Set up a minimal Kubernetes cluster on Rapberry Pi 4.
I ordered a new Raspberry Pi 4 a couple of days ago. I already use one at work for automated testing and I think it&amp;rsquo;s pretty cool, but I actually wasn&amp;rsquo;t sure what I wanted it for. After giving it a thought, I decided to try to set up a K3S cluster on it.
Possibility 1: the Raspberry Pi 4 will be both master and worker Possibility 2: the Raspberry Pi 4 will be the master.</description>
    </item>
    
    <item>
      <title>First Kubernetes Deployment</title>
      <link>https://eramons.github.io/techblog/post/deploy_gogs/</link>
      <pubDate>Sun, 22 Mar 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/deploy_gogs/</guid>
      <description>Goal:
Deploy Gogs - a painless self-hosted Git service - on homemade Kubernetes Cluster.
After I had my own Kubernetes cluster ready, I wanted to try it out. Setting up the cluster was almost too easy, so I was expecting some fine-tuning to be necessary. As first application I chose gogs - a self-hosted github clone.
I struggle with too many things to do in very little time - like many others, I guess - so I&amp;rsquo;m always trying to optimise life processes.</description>
    </item>
    
    <item>
      <title>Set up a Home Kubernetes Cluster</title>
      <link>https://eramons.github.io/techblog/post/kubernetes_cluster/</link>
      <pubDate>Sat, 21 Mar 2020 15:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/kubernetes_cluster/</guid>
      <description>Goal:
Set up a home Kubernetes cluster with old hardware: 1 Master and 1 Worker
Tasks:
 Find old hardware Install Ubuntu Server 18.04 LTS Set up Master Node Set up Worker Node Service Account Install Helm  1. Find old hardware Since kubernetes is lightweight and can run almost everywhere, I decided to go down to the cellar and rescue some old PC which I thought could still work for this.</description>
    </item>
    
    <item>
      <title>EHCI Debug</title>
      <link>https://eramons.github.io/techblog/post/debug_coreboot/</link>
      <pubDate>Wed, 13 Mar 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/debug_coreboot/</guid>
      <description>The EHCI Debug Port is an optional capability of EHCI controllers which can be used for early debugging for hardware which does not have a serial port. All USB2 host controllers are EHCI controllers.
TODO: Explain USB Device / USB Gadget
Since I installed Coreboot on my Librem, I experienced some issues. In order to investigate - and since the Librem has no serial port - I aimed to do some Coreboot and kernel debugging with a Raspberry Pi Zero.</description>
    </item>
    
    <item>
      <title>Build Coreboot</title>
      <link>https://eramons.github.io/techblog/post/build_coreboot/</link>
      <pubDate>Mon, 25 Feb 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/build_coreboot/</guid>
      <description>DISCLAIMER: try anything described here at your own risk! These are just my notes. That it did work for me then does not mean this would work for you now.
After successfully installing coreboot on my librem 13 v1, I noticed that unfortunately the wifi wasn&amp;rsquo;t working anymore. Since the coreboot version I flashed previously wasn&amp;rsquo;t quite new, I decided to build a new rom image myself using the newest coreboot source code.</description>
    </item>
    
    <item>
      <title>Install Coreboot on the Librem 13 v.1</title>
      <link>https://eramons.github.io/techblog/post/coreboot_librem/</link>
      <pubDate>Mon, 18 Feb 2019 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/coreboot_librem/</guid>
      <description>DISCLAIMER: try this at your own risk! The information below it&amp;rsquo;s just a summary of my notes and experiences during the installation of coreboot on my notebook.
I am the proud owner of a Librem 13 v1 (bought in September 2016). Currently all librem laptops are shipped with coreboot installed on them, but mine was still shipped with propietary firmware on it. Fortunately coreboot is supported anyway - it was possible for me to install coreboot myself.</description>
    </item>
    
    <item>
      <title>Debian on Asus Chromebook Flip C101PA</title>
      <link>https://eramons.github.io/techblog/post/asuschromebook_debian/</link>
      <pubDate>Tue, 04 Dec 2018 10:00:00 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/asuschromebook_debian/</guid>
      <description>The Asus Chromebook Flip C101PA (bob) is a convertible touchscreen laptop powered by an ARMv8 Rockchip RK3399 hexa-core processor and 4GB RAM, measuring 10.4&amp;rdquo; x 7.2&amp;rdquo; x 0.6&amp;rdquo; and weighing 1 kg.
Features:
 Rockchip RK3399 (OP1) dual-core 2.0GHz Cortex-A72 and quad-core 1.4GHz Cortex-A53 processor 4GB LPDDR3 RAM 10.1&amp;rdquo; 1280x800 LED display Mali T860MP4 GPU 16GB eMMC 38 Whrs battery 2x USB 3.1 Type-C ports 1x USB 2.0 Type-A port  ARM Chromebooks ship with the Coreboot bootloader and use Depthcharge as the payload.</description>
    </item>
    
    <item>
      <title>Debian on Radxa Rock Square</title>
      <link>https://eramons.github.io/techblog/post/rock2_debian/</link>
      <pubDate>Thu, 27 Jul 2017 15:03:58 +0200</pubDate>
      
      <guid>https://eramons.github.io/techblog/post/rock2_debian/</guid>
      <description>Radxa Rock 2 Square is a Rockchip RK3288 based solution.
Available images
The available images run with:
 A modified version of u-boot The Rabian operating system (which is based on Debian 8) A custom radxa kernel.  The goal is to get a pure Debian distribution up and running on the board:
 Debian u-boot Debian armhf linux-image kernel Pure Debian root file system  For this small project, we have two Radxa Rock 2 Square boards:</description>
    </item>
    
  </channel>
</rss>